pipeline {
    agent any

    environment {
        BASE_URL = credentials('xfit_base_url')
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è'
                checkout scm
                sh 'pwd'
                sh 'ls -la'
            }
        }

        stage('Install & Run') {
            steps {
                echo 'üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤'
                sh '''
                    python3 -m venv .venv
                    .venv/bin/pip install --upgrade pip
                    .venv/bin/pip install -r requirements.txt
                    echo "BASE_URL=$BASE_URL" > .env
                    .venv/bin/pytest tests/ --alluredir=allure-results --maxfail=1 --disable-warnings -v
                '''
            }
        }

        stage('Allure Report') {
            steps {
                echo 'üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Allure –æ—Ç—á–µ—Ç–∞'
                allure([
                    includeProperties: false,
                    jdk: '',
                    reportBuildPolicy: 'ALWAYS',
                    results: [[path: 'allure-results']]
                ])
            }
        }
    }

    post {
        always {
            echo 'üßπ –û—á–∏—Å—Ç–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è'
            sh 'rm -rf .venv'
        }

        success {
            echo '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!'
        }

        failure {
            echo '‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å –æ—Ç—á—ë—Ç –∏ –ª–æ–≥–∏'
        }
    }
}
